Collaborative Jukebox - etapa 2

Papa Florin, SRIC
Ditu Alexandru, SRIC
Mardaloescu Serban, ISI

Pana la momentul curent, am implementat, in mare parte, componenta de front-end
a aplicatiei, care foloseste HTML5, Javascript (jquery, mustache) si CSS
(bootstrap). Mustache.js reprezinta un framework pentru rendering de
template-uri pe care il folosim pentru a incarca in mod dinamic continutul
paginii principale a aplicatiei (lista de utilizatori, melodii, punctaj etc.).
Datele de la server sunt furnizate in format JSON clientului, care le foloseste
pentru a popula pagina principala. Melodia curenta este redata folosind
Youtube API (Javascript).

Server-ul este o aplicatie Java EE care mentine lista utilizatorilor activi,
lista de melodii, scorul melodiilor, voturile utilizatorilor, melodia curenta,
timestamp-ul curent (pentru sincronizarea clientilor) etc. Pe partea de server,
am implementat componenta de login a utilizatorilor, inregistrarea voturilor,
transmiterea datelor catre clienti in format JSON, push notifications (pentru
a face update la datele din interfata clientului - utilizatori, melodii, scor
etc.).

Activitati urmatoare:
* integrare player audio in aplicatia client
* dezvoltare algoritm de votare
* implementare colaborare intre utilizatori
	* posibilitatea de "follow" - transfer putere de votare
* integrare push notifications in aplicatia client

UserExperience:
* mute button
* volume slider
* current seek time

TODO:
* am implementat trimiterea de notificari (addUser, removeUser) dar trebuie interpretate de client


Tools:
	Eclipse Mars version
	Glassfish 4.1.1

--------------------------------------------------------------------------------
Glassfish 4.1.1:
--------------------------------------------------------------------------------
	- unzip server: /opt/glassfish4
	- asadmin script location: /opt/glassfish4/glassfish/asadmin (add it to path)
	- intial commands:
		asadmin start-domain
		asadmin change-admin-password
		asadmin --host localhost --port 4848 enable-secure-admin
		asadmin set server.admin-service.das-config.admin-session-timeout-in-minutes=120
 
	- useful commands:
		asadmin start-domain
		asadmin stop-domain
		asadmin restart-domain
		asadmin list-applications

	- deploy to server:
		1. Create passfile with content:
			 S_ADMIN_PASSWORD=weblogic1

			echo "S_ADMIN_PASSWORD=weblogic1" > /opt/glassfish4/passfile

		2. Deploy to server:
		asadmin --user admin \
				--passwordfile /opt/glassfish4/passfile deploy \
				--contextroot <ctx-root> \
				--force=true --name <appName> --target server <war-location>




--------------------------------------------------------------------------------
Test WebServices using curl:
--------------------------------------------------------------------------------
location: 	http://localhost:8080/juke/j/rest/<serviceName>
wadl:		http://localhost:8080/juke/j/application.wadl[?detail=true]

# send json data + show transfered data
curl -X POST -k -H "Content-Type: application/json" --data @body.json http://localhost:8080/juke/j/rest/test4 --trace-ascii /dev/stdout

# send www-form-urlencoded (POST) params
curl -X POST -kv -d "p=123" http://localhost:8080/juke/j/rest/test3

# getTime
curl -X POST -kv http://localhost:8080/juke/j/rest/getTime
{"seekTime":27}

# getSong -- returns current song info
curl -X POST -kv http://localhost:8080/juke/j/rest/getSong


Log4j2:
	File appender example:
	
	<Appenders>
		<!-- Glassfish default location is: glassfish/domains/domain1/config/logs/app.log -->
		<!-- ${com.sun.aas.instanceRoot}/logs/MyApplication.log -->
		<File name="MyFile" fileName="logs/app.log"> 
			<PatternLayout>
				<Pattern>%d [%p] %c{1.} - %m%n</Pattern>
			</PatternLayout>
		</File>
	</Appenders>
